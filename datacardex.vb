'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class datacardex
    Inherits DataSet
    
    Private tablecardex As cardexDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cardex")) Is Nothing) Then
                Me.Tables.Add(New cardexDataTable(ds.Tables("cardex")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cardex As cardexDataTable
        Get
            Return Me.tablecardex
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As datacardex = CType(MyBase.Clone,datacardex)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cardex")) Is Nothing) Then
            Me.Tables.Add(New cardexDataTable(ds.Tables("cardex")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecardex = CType(Me.Tables("cardex"),cardexDataTable)
        If (Not (Me.tablecardex) Is Nothing) Then
            Me.tablecardex.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "datacardex"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/datacardex.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecardex = New cardexDataTable
        Me.Tables.Add(Me.tablecardex)
    End Sub
    
    Private Function ShouldSerializecardex() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cardexRowChangeEventHandler(ByVal sender As Object, ByVal e As cardexRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cardexDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpro_descripcion As DataColumn
        
        Private columncompras As DataColumn
        
        Private columnventas As DataColumn
        
        Friend Sub New()
            MyBase.New("cardex")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property pro_descripcionColumn As DataColumn
            Get
                Return Me.columnpro_descripcion
            End Get
        End Property
        
        Friend ReadOnly Property comprasColumn As DataColumn
            Get
                Return Me.columncompras
            End Get
        End Property
        
        Friend ReadOnly Property ventasColumn As DataColumn
            Get
                Return Me.columnventas
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cardexRow
            Get
                Return CType(Me.Rows(index),cardexRow)
            End Get
        End Property
        
        Public Event cardexRowChanged As cardexRowChangeEventHandler
        
        Public Event cardexRowChanging As cardexRowChangeEventHandler
        
        Public Event cardexRowDeleted As cardexRowChangeEventHandler
        
        Public Event cardexRowDeleting As cardexRowChangeEventHandler
        
        Public Overloads Sub AddcardexRow(ByVal row As cardexRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcardexRow(ByVal pro_descripcion As String, ByVal compras As String, ByVal ventas As String) As cardexRow
            Dim rowcardexRow As cardexRow = CType(Me.NewRow,cardexRow)
            rowcardexRow.ItemArray = New Object() {pro_descripcion, compras, ventas}
            Me.Rows.Add(rowcardexRow)
            Return rowcardexRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cardexDataTable = CType(MyBase.Clone,cardexDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cardexDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpro_descripcion = Me.Columns("pro_descripcion")
            Me.columncompras = Me.Columns("compras")
            Me.columnventas = Me.Columns("ventas")
        End Sub
        
        Private Sub InitClass()
            Me.columnpro_descripcion = New DataColumn("pro_descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpro_descripcion)
            Me.columncompras = New DataColumn("compras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncompras)
            Me.columnventas = New DataColumn("ventas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnventas)
        End Sub
        
        Public Function NewcardexRow() As cardexRow
            Return CType(Me.NewRow,cardexRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cardexRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cardexRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cardexRowChangedEvent) Is Nothing) Then
                RaiseEvent cardexRowChanged(Me, New cardexRowChangeEvent(CType(e.Row,cardexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cardexRowChangingEvent) Is Nothing) Then
                RaiseEvent cardexRowChanging(Me, New cardexRowChangeEvent(CType(e.Row,cardexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cardexRowDeletedEvent) Is Nothing) Then
                RaiseEvent cardexRowDeleted(Me, New cardexRowChangeEvent(CType(e.Row,cardexRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cardexRowDeletingEvent) Is Nothing) Then
                RaiseEvent cardexRowDeleting(Me, New cardexRowChangeEvent(CType(e.Row,cardexRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecardexRow(ByVal row As cardexRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cardexRow
        Inherits DataRow
        
        Private tablecardex As cardexDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecardex = CType(Me.Table,cardexDataTable)
        End Sub
        
        Public Property pro_descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tablecardex.pro_descripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecardex.pro_descripcionColumn) = value
            End Set
        End Property
        
        Public Property compras As String
            Get
                Try 
                    Return CType(Me(Me.tablecardex.comprasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecardex.comprasColumn) = value
            End Set
        End Property
        
        Public Property ventas As String
            Get
                Try 
                    Return CType(Me(Me.tablecardex.ventasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecardex.ventasColumn) = value
            End Set
        End Property
        
        Public Function Ispro_descripcionNull() As Boolean
            Return Me.IsNull(Me.tablecardex.pro_descripcionColumn)
        End Function
        
        Public Sub Setpro_descripcionNull()
            Me(Me.tablecardex.pro_descripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscomprasNull() As Boolean
            Return Me.IsNull(Me.tablecardex.comprasColumn)
        End Function
        
        Public Sub SetcomprasNull()
            Me(Me.tablecardex.comprasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsventasNull() As Boolean
            Return Me.IsNull(Me.tablecardex.ventasColumn)
        End Function
        
        Public Sub SetventasNull()
            Me(Me.tablecardex.ventasColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cardexRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cardexRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cardexRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cardexRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
